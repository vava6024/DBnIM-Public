# -*- coding: utf-8 -*-
"""DBnI Lab 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VU5EBxlHF6R7S66nf5Vtq3VbTRJCMTx1
"""

#Nevaeh Johnson
# Lab Assignment # 2 Database Design And Implementation

# if no module found, install using this command: !pip install networkx
import networkx as nx

#if no module found, install using this command: !pip install matplotlib
import matplotlib.pyplot as plt

#creat graph to represent the social network of students and their connections
G = nx.Graph()

#student list
students = ["Alice", "Bob", "Charlie", "David", "Eve", "Frank", "Grace"]

#add students as nodes on the graph
G.add_nodes_from(students)

print(students)

#lish of connections between students, represents a connection between two students
connections = [
    ("Alice", "Bob"),
    ("ALice", "Charlie"),
    ("Bob", "Charlie"),
    ("Bob", "David"),
    ("Charlie", "Eve"),
    ("David", "Eve"),
    ("Eve", "Frank"),
    ("Frank", "Grace"),
    ("Grace", "Eve")
]

#add connections as edges to the graph
G.add_edges_from(connections)

print(connections)

#print basic information about the graph
print("Nodes of the graph:", G.nodes())
print("Edges of the graph:", G.edges())
print("Number of the nodes:", G.number_of_nodes())
print("Number of edges:", G.number_of_edges())

#visualize network
nx.draw(G, with_labels=True, font_weight='bold', node_color='Blue', node_size=1000, edge_color='pink')
plt.title("Social Network Graph Model")
plt.show()

#cnetrality means a network is directly connected to many others (degree centrality)
degree_centrality = nx.degree_centrality(G)
print("\nDegree Centrality:")
for student, centrality in degree_centrality.items():
  print(f"{student}: {centrality:.2f}")

# serve as a key broker between many other nodes (betweenness centrality)
betweenness_centrality = nx.betweenness_centrality(G)
print("\nBetweenness Centrality:")
for student, centrality in betweenness_centrality.items():
  print(f"{students}: {centrality:.2f}")

#close to many others indirectly (closeness centrality)
closeness_centrality = nx.closeness_centrality(G)
print("\nCloseness Centrality:")
for student, centrality in closeness_centrality.items():
  print(f"{student}: {centrality:.2f}")